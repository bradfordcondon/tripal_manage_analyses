<?php

/**
 *  Install module
 */
function tripal_manage_analyses_install() {
  tripal_manage_analyses_update_unigene_props();
  tripal_manage_analyses_migrate_unigene();
}

/**
 * Find all analyses that are unigene analyses.  Set the analysis_type prop
 * of each based on their features to either analysis_unigene (for
 * transcriptome) or to genome_assembly.
 */
function tripal_manage_analyses_update_unigene_props() {

  $cvterm = tripal_get_cvterm(
    [
      'name' => 'analysis_unigene_name',
      'cv_id' => ['name' => 'analysis_property'],
    ]);


  $analysis_unigene_cvt_id = $cvterm->cvterm_id;


  print("aucvtid: " . $analysis_unigene_cvt_id);

  $sql = "SELECT DISTINCT  A.analysis_id, F.type_id  FROM {analysis} A
        INNER JOIN {analysisprop} AP  ON A.analysis_id = AP.analysis_id
        INNER JOIN {cvterm} CVT ON AP.type_id = CVT.cvterm_id
        INNER JOIN {analysisfeature} AF ON A.analysis_id = AF.analysis_id
        INNER JOIN {feature} F ON AF.feature_id = F.feature_id
        WHERE CVT.cvterm_id = :cvterm_id ";

  $cvterm = tripal_get_cvterm([
    'name' => 'mRNA_contig',
    'cv_id' => ['name' => 'sequence',],
  ]);
  $mrna_contig_id = $cvterm->cvterm_id;
  $cvterm = tripal_get_cvterm([
    'name' => 'mRNA',
    'cv_id' => ['name' => 'sequence'],
  ]);
  $mrna_id = $cvterm->cvterm_id;

  $results = chado_query($sql, [":cvterm_id" => $analysis_unigene_cvt_id]);
  foreach ($results as $result) {

    $property_value = NULL;

    $analysis_id = $result->analysis_id;


    if ($result->type_id == $mrna_contig_id) {
      $property_value = 'tripal_analysis_unigene';
    }
    if ($result->type_id == $mrna_id) {
      $property_value = 'genome_assembly';
    }

    if ($property_value) {
      $record = [
        'table' => 'analysis',
        'id' => $analysis_id,
      ];



      $analysis_type_cvterm = tripal_get_cvterm(['name' => 'analysis_type', 'cv_id' => ['name' => 'tripal_analysis']]);

      if (!$analysis_type_cvterm) {
        $analysis_type_cvterm = tripal_insert_cvterm(array(
          'name' => 'analysis_type',
          'def' => 'The type of analysis was performed. This value is automatically set by each Tripal Analysis module and should be equal to the module name (e.g. tripal_analysis_blast, tripal_analysis_go).',
          'cv_name' => 'tripal_analysis',
          'db_name' => 'analysis_type',
        ));
      }



      $property = [
        'type_name' => $analysis_type_cvterm->name,
        'cv_name' => 'tripal_analysis',
        'value' => $property_value,
      ];
      $options = [
        'update_if_present' => TRUE,
      ];
      chado_update_property($record, $property, $options);
    }
  }

}

/**
 * @throws \Exception
 * Migrates *existing entities* of appropriately tagged unigene analyses to one
 *   of two new tripal entity types.
 */

function tripal_manage_analyses_migrate_unigene() {

  //Determine which bio_data table houses analyses
  $term = tripal_load_term_entity([
    'vocabulary' => 'operation',
    'accession' => '2945',
  ]);
  $bundle = tripal_load_bundle_entity(['term_id' => $term->id]);

  //create Transcriptome and Genome bundles
  $error = '';
  $analysis_type_cvterm = tripal_get_cvterm(['id' => 'local:analysis_type']);
  $analysis_type_cvterm_id = $analysis_type_cvterm->cvterm_id;
  $args_array = [
    [
      'vocabulary' => 'operation',
      'accession' => '3258',
      'term_name' => 'Transcriptome assembly',
      'storage_args' => [
        'data_table' => 'analysis',
        'type_linker_table' => 'analysisprop',
        'type_value' => 'tripal_analysis_unigene',
        'type_column' => 'type_id',
        'type_id' => $analysis_type_cvterm_id,
      ],
    ],
    [
      'vocabulary' => 'operation',
      'accession' => '0525',
      'term_name' => 'Genome assembly',
      'storage_args' => [
        'data_table' => 'analysis',
        'type_linker_table' => 'analysisprop',
        'type_value' => 'genome_assembly',
        'type_column' => 'type_id',
        'type_id' => $analysis_type_cvterm_id,
      ],
    ],
  ];

  foreach ($args_array as $args) {

    $type_value = $args['storage_args']['type_value'];

    $term = tripal_load_term_entity([
      'vocabulary' => $args["vocabulary"],
      'accession' => $args["accession"],
    ]);
    if ($term) {
      $bundle = tripal_load_bundle_entity(['term_id' => $term->id]);
    }
    if (!$term or !$bundle) {
      if (!tripal_create_bundle($args, $error)) {
        throw new Exception($error['!message']);
      }
    }

    //Get record ID's for all analyses that will be unigene analyses
    $sql = "SELECT A.analysis_id FROM {analysis} A
        INNER JOIN {analysisprop} AP  ON A.analysis_id = AP.analysis_id
        INNER JOIN {cvterm} CVT ON AP.type_id = CVT.cvterm_id
        WHERE CVT.cvterm_id = :cvterm_id 
        AND AP.value = :analysis_prop_value";
    $results = chado_query($sql, [
      ":cvterm_id" => $analysis_type_cvterm_id,
      ":analysis_prop_value" => $type_value,
    ]);

    foreach ($results as $result) {

    }

  }

}